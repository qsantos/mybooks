#!/usr/bin/env python3
import json
import re
from argparse import ArgumentParser
from typing import Iterator, List, NamedTuple, Optional

import pandas as pd
from dateutil.parser import parse as parse_date

date_pattern = re.compile(r'^(?:([0-9]{2})/)?(?:([0-9]{2})/)?([0-9]{4})$')


class Book(NamedTuple):
    title: str
    authors: List[str]
    genres: List[str]
    publication_date: Optional[str]
    publication_year: Optional[int]
    editor: str
    pages: int
    isbn: str
    read: bool
    summary: str
    comic: bool
    owned: bool


def parse_book(book: pd.Series, comic: bool, owned: bool) -> dict:
    publication = book['Date de publication']
    publication_date = None
    publication_year = None
    if publication:
        try:
            publication_year = int(publication)
        except ValueError:
            publication_dt = parse_date(publication)
            publication_date = publication_dt.date().isoformat()
            publication_year = publication_dt.year
    return Book(
        title=book['Titre'],
        authors=book['Auteurs'].split(', '),
        genres=book['Genres'].split(', '),
        publication_date=publication_date,
        publication_year=publication_year,
        editor=book['Editeur'],
        pages=book['Pages'],
        isbn=book['ISBN'],
        read=book['Lu'] == 'Oui',
        summary=book['Résumé'],
        comic=comic,
        owned=owned,
    )._asdict()


def parse_books(books: pd.DataFrame, comic: bool, owned: bool) -> Iterator[dict]:
    for _, book in books.iterrows():
        yield parse_book(book, comic=comic, owned=owned)


def main() -> None:
    parser = ArgumentParser()
    parser.add_argument(
        'filename', help='XLS files from MyBibliotheque, e.g. MyBibliotheque.xls'
    )
    args = parser.parse_args()

    df = pd.read_excel(args.filename, na_filter=False, sheet_name=None)
    books: list[dict] = []
    books += parse_books(df['Livres'], comic=False, owned=True)
    books += parse_books(df['Livres - Liste de souhaits'], comic=False, owned=False)
    books += parse_books(df['Bandes Dessinées'], comic=True, owned=True)
    books += parse_books(df['Bandes Dessinées - Liste de sou'], comic=True, owned=False)
    print(json.dumps(books))


if __name__ == '__main__':
    main()
