#!/usr/bin/env python3
import json
import re
from datetime import date
from typing import Iterator, List, NamedTuple, Optional

import pandas as pd

date_pattern = re.compile(r'^(?:([0-9]{2})/)?(?:([0-9]{2})/)?([0-9]{4})$')


class Book(NamedTuple):
    title: str
    authors: List[str]
    genres: List[str]
    publication_date: Optional[str]
    publication_year: Optional[int]
    editor: str
    pages: int
    isbn: str
    read: bool
    summary: str


def parse_book(book: pd.Series) -> dict:
    publication = book['Date de publication']
    publication_date = None
    publication_year = None
    if publication:
        m = date_pattern.match(publication)
        assert m is not None
        day, month, year = m.groups()
        if day and month:
            publication_date = f'{int(year):04}-{int(month):02}-{int(day):02}'
        publication_year = int(year)
    return Book(
        title=book['Titre'],
        authors=book['Auteurs'].split(', '),
        genres=book['Genres'].split(', '),
        publication_date=publication_date,
        publication_year=publication_year,
        editor=book['Editeur'],
        pages=book['Pages'],
        isbn=book['ISBN'],
        read=book['Lu'] == 'Oui',
        summary=book['Résumé'],
    )._asdict()


def parse_books(books: pd.DataFrame) -> Iterator[dict]:
    for _, book in books.iterrows():
        yield parse_book(book)


df = pd.read_excel('MaBibliotheque.xls', na_filter=False)
books = list(parse_books(df))
print(json.dumps(books))
